
ledMatix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000834  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000964  08000964  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000964  08000964  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08000964  08000964  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000964  08000964  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000964  08000964  00010964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000968  08000968  00010968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  0800096c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000034  080009a0  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  080009a0  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000530  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000348  00000000  00000000  0002058d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000140  00000000  00000000  000208d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000e8  00000000  00000000  00020a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000ea3  00000000  00000000  00020b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000005c7  00000000  00000000  000219a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003d89  00000000  00000000  00021f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00025cf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000033c  00000000  00000000  00025d70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000034 	.word	0x20000034
 800014c:	00000000 	.word	0x00000000
 8000150:	0800094c 	.word	0x0800094c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000038 	.word	0x20000038
 800016c:	0800094c 	.word	0x0800094c

08000170 <GPIO_voidSetPinDirection>:


#include"GPIO_interface.h"
#include"GPIO_private.h"

void GPIO_voidSetPinDirection(u8 copy_u8PORT, u8 copy_u8PIN, u8 copy_u8Mode){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	460b      	mov	r3, r1
 800017c:	71bb      	strb	r3, [r7, #6]
 800017e:	4613      	mov	r3, r2
 8000180:	717b      	strb	r3, [r7, #5]

    switch (copy_u8PORT)
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	2b01      	cmp	r3, #1
 8000186:	d03e      	beq.n	8000206 <GPIO_voidSetPinDirection+0x96>
 8000188:	2b02      	cmp	r3, #2
 800018a:	d075      	beq.n	8000278 <GPIO_voidSetPinDirection+0x108>
 800018c:	2b00      	cmp	r3, #0
 800018e:	d000      	beq.n	8000192 <GPIO_voidSetPinDirection+0x22>
            GPIOC_CRH &= ~(0b1111 << (copy_u8PIN*4));
            GPIOC_CRH |= (copy_u8Mode << (copy_u8PIN*4));
        }
        break;
    default:
        break;
 8000190:	e0b0      	b.n	80002f4 <GPIO_voidSetPinDirection+0x184>
        if(copy_u8PIN < 8){
 8000192:	79bb      	ldrb	r3, [r7, #6]
 8000194:	2b07      	cmp	r3, #7
 8000196:	d817      	bhi.n	80001c8 <GPIO_voidSetPinDirection+0x58>
            GPIOA_CRL &= ~(0b1111 << (copy_u8PIN*4)) ;
 8000198:	4b59      	ldr	r3, [pc, #356]	; (8000300 <GPIO_voidSetPinDirection+0x190>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	79ba      	ldrb	r2, [r7, #6]
 800019e:	0092      	lsls	r2, r2, #2
 80001a0:	210f      	movs	r1, #15
 80001a2:	fa01 f202 	lsl.w	r2, r1, r2
 80001a6:	43d2      	mvns	r2, r2
 80001a8:	4611      	mov	r1, r2
 80001aa:	4a55      	ldr	r2, [pc, #340]	; (8000300 <GPIO_voidSetPinDirection+0x190>)
 80001ac:	400b      	ands	r3, r1
 80001ae:	6013      	str	r3, [r2, #0]
            GPIOA_CRL |= (copy_u8Mode << (copy_u8PIN*4));
 80001b0:	4b53      	ldr	r3, [pc, #332]	; (8000300 <GPIO_voidSetPinDirection+0x190>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	7979      	ldrb	r1, [r7, #5]
 80001b6:	79ba      	ldrb	r2, [r7, #6]
 80001b8:	0092      	lsls	r2, r2, #2
 80001ba:	fa01 f202 	lsl.w	r2, r1, r2
 80001be:	4611      	mov	r1, r2
 80001c0:	4a4f      	ldr	r2, [pc, #316]	; (8000300 <GPIO_voidSetPinDirection+0x190>)
 80001c2:	430b      	orrs	r3, r1
 80001c4:	6013      	str	r3, [r2, #0]
        break;
 80001c6:	e090      	b.n	80002ea <GPIO_voidSetPinDirection+0x17a>
        else if(copy_u8PIN < 16){
 80001c8:	79bb      	ldrb	r3, [r7, #6]
 80001ca:	2b0f      	cmp	r3, #15
 80001cc:	f200 808d 	bhi.w	80002ea <GPIO_voidSetPinDirection+0x17a>
            copy_u8PIN = copy_u8PIN-8;
 80001d0:	79bb      	ldrb	r3, [r7, #6]
 80001d2:	3b08      	subs	r3, #8
 80001d4:	71bb      	strb	r3, [r7, #6]
            GPIOA_CRH &= ~(0b1111 << (copy_u8PIN*4)) ;
 80001d6:	4b4b      	ldr	r3, [pc, #300]	; (8000304 <GPIO_voidSetPinDirection+0x194>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	79ba      	ldrb	r2, [r7, #6]
 80001dc:	0092      	lsls	r2, r2, #2
 80001de:	210f      	movs	r1, #15
 80001e0:	fa01 f202 	lsl.w	r2, r1, r2
 80001e4:	43d2      	mvns	r2, r2
 80001e6:	4611      	mov	r1, r2
 80001e8:	4a46      	ldr	r2, [pc, #280]	; (8000304 <GPIO_voidSetPinDirection+0x194>)
 80001ea:	400b      	ands	r3, r1
 80001ec:	6013      	str	r3, [r2, #0]
            GPIOA_CRH |= (copy_u8Mode << (copy_u8PIN*4));
 80001ee:	4b45      	ldr	r3, [pc, #276]	; (8000304 <GPIO_voidSetPinDirection+0x194>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	7979      	ldrb	r1, [r7, #5]
 80001f4:	79ba      	ldrb	r2, [r7, #6]
 80001f6:	0092      	lsls	r2, r2, #2
 80001f8:	fa01 f202 	lsl.w	r2, r1, r2
 80001fc:	4611      	mov	r1, r2
 80001fe:	4a41      	ldr	r2, [pc, #260]	; (8000304 <GPIO_voidSetPinDirection+0x194>)
 8000200:	430b      	orrs	r3, r1
 8000202:	6013      	str	r3, [r2, #0]
        break;
 8000204:	e071      	b.n	80002ea <GPIO_voidSetPinDirection+0x17a>
         if(copy_u8PIN < 8){
 8000206:	79bb      	ldrb	r3, [r7, #6]
 8000208:	2b07      	cmp	r3, #7
 800020a:	d817      	bhi.n	800023c <GPIO_voidSetPinDirection+0xcc>
            GPIOB_CRL &= ~(0b1111 << (copy_u8PIN*4));
 800020c:	4b3e      	ldr	r3, [pc, #248]	; (8000308 <GPIO_voidSetPinDirection+0x198>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	79ba      	ldrb	r2, [r7, #6]
 8000212:	0092      	lsls	r2, r2, #2
 8000214:	210f      	movs	r1, #15
 8000216:	fa01 f202 	lsl.w	r2, r1, r2
 800021a:	43d2      	mvns	r2, r2
 800021c:	4611      	mov	r1, r2
 800021e:	4a3a      	ldr	r2, [pc, #232]	; (8000308 <GPIO_voidSetPinDirection+0x198>)
 8000220:	400b      	ands	r3, r1
 8000222:	6013      	str	r3, [r2, #0]
            GPIOB_CRL |= (copy_u8Mode << (copy_u8PIN*4));
 8000224:	4b38      	ldr	r3, [pc, #224]	; (8000308 <GPIO_voidSetPinDirection+0x198>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	7979      	ldrb	r1, [r7, #5]
 800022a:	79ba      	ldrb	r2, [r7, #6]
 800022c:	0092      	lsls	r2, r2, #2
 800022e:	fa01 f202 	lsl.w	r2, r1, r2
 8000232:	4611      	mov	r1, r2
 8000234:	4a34      	ldr	r2, [pc, #208]	; (8000308 <GPIO_voidSetPinDirection+0x198>)
 8000236:	430b      	orrs	r3, r1
 8000238:	6013      	str	r3, [r2, #0]
        break;
 800023a:	e058      	b.n	80002ee <GPIO_voidSetPinDirection+0x17e>
        else if(copy_u8PIN < 16){
 800023c:	79bb      	ldrb	r3, [r7, #6]
 800023e:	2b0f      	cmp	r3, #15
 8000240:	d855      	bhi.n	80002ee <GPIO_voidSetPinDirection+0x17e>
            copy_u8PIN = copy_u8PIN-8;
 8000242:	79bb      	ldrb	r3, [r7, #6]
 8000244:	3b08      	subs	r3, #8
 8000246:	71bb      	strb	r3, [r7, #6]
            GPIOB_CRH &= ~(0b1111 << (copy_u8PIN*4));
 8000248:	4b30      	ldr	r3, [pc, #192]	; (800030c <GPIO_voidSetPinDirection+0x19c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	79ba      	ldrb	r2, [r7, #6]
 800024e:	0092      	lsls	r2, r2, #2
 8000250:	210f      	movs	r1, #15
 8000252:	fa01 f202 	lsl.w	r2, r1, r2
 8000256:	43d2      	mvns	r2, r2
 8000258:	4611      	mov	r1, r2
 800025a:	4a2c      	ldr	r2, [pc, #176]	; (800030c <GPIO_voidSetPinDirection+0x19c>)
 800025c:	400b      	ands	r3, r1
 800025e:	6013      	str	r3, [r2, #0]
            GPIOB_CRH |= (copy_u8Mode << (copy_u8PIN*4));
 8000260:	4b2a      	ldr	r3, [pc, #168]	; (800030c <GPIO_voidSetPinDirection+0x19c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	7979      	ldrb	r1, [r7, #5]
 8000266:	79ba      	ldrb	r2, [r7, #6]
 8000268:	0092      	lsls	r2, r2, #2
 800026a:	fa01 f202 	lsl.w	r2, r1, r2
 800026e:	4611      	mov	r1, r2
 8000270:	4a26      	ldr	r2, [pc, #152]	; (800030c <GPIO_voidSetPinDirection+0x19c>)
 8000272:	430b      	orrs	r3, r1
 8000274:	6013      	str	r3, [r2, #0]
        break;
 8000276:	e03a      	b.n	80002ee <GPIO_voidSetPinDirection+0x17e>
        if(copy_u8PIN < 8){
 8000278:	79bb      	ldrb	r3, [r7, #6]
 800027a:	2b07      	cmp	r3, #7
 800027c:	d817      	bhi.n	80002ae <GPIO_voidSetPinDirection+0x13e>
            GPIOC_CRL &= ~(0b1111 << (copy_u8PIN*4));
 800027e:	4b24      	ldr	r3, [pc, #144]	; (8000310 <GPIO_voidSetPinDirection+0x1a0>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	79ba      	ldrb	r2, [r7, #6]
 8000284:	0092      	lsls	r2, r2, #2
 8000286:	210f      	movs	r1, #15
 8000288:	fa01 f202 	lsl.w	r2, r1, r2
 800028c:	43d2      	mvns	r2, r2
 800028e:	4611      	mov	r1, r2
 8000290:	4a1f      	ldr	r2, [pc, #124]	; (8000310 <GPIO_voidSetPinDirection+0x1a0>)
 8000292:	400b      	ands	r3, r1
 8000294:	6013      	str	r3, [r2, #0]
            GPIOC_CRL |= (copy_u8Mode << (copy_u8PIN*4));
 8000296:	4b1e      	ldr	r3, [pc, #120]	; (8000310 <GPIO_voidSetPinDirection+0x1a0>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	7979      	ldrb	r1, [r7, #5]
 800029c:	79ba      	ldrb	r2, [r7, #6]
 800029e:	0092      	lsls	r2, r2, #2
 80002a0:	fa01 f202 	lsl.w	r2, r1, r2
 80002a4:	4611      	mov	r1, r2
 80002a6:	4a1a      	ldr	r2, [pc, #104]	; (8000310 <GPIO_voidSetPinDirection+0x1a0>)
 80002a8:	430b      	orrs	r3, r1
 80002aa:	6013      	str	r3, [r2, #0]
        break;
 80002ac:	e021      	b.n	80002f2 <GPIO_voidSetPinDirection+0x182>
        else if(copy_u8PIN < 16){
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	2b0f      	cmp	r3, #15
 80002b2:	d81e      	bhi.n	80002f2 <GPIO_voidSetPinDirection+0x182>
            copy_u8PIN = copy_u8PIN-8;
 80002b4:	79bb      	ldrb	r3, [r7, #6]
 80002b6:	3b08      	subs	r3, #8
 80002b8:	71bb      	strb	r3, [r7, #6]
            GPIOC_CRH &= ~(0b1111 << (copy_u8PIN*4));
 80002ba:	4b16      	ldr	r3, [pc, #88]	; (8000314 <GPIO_voidSetPinDirection+0x1a4>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	79ba      	ldrb	r2, [r7, #6]
 80002c0:	0092      	lsls	r2, r2, #2
 80002c2:	210f      	movs	r1, #15
 80002c4:	fa01 f202 	lsl.w	r2, r1, r2
 80002c8:	43d2      	mvns	r2, r2
 80002ca:	4611      	mov	r1, r2
 80002cc:	4a11      	ldr	r2, [pc, #68]	; (8000314 <GPIO_voidSetPinDirection+0x1a4>)
 80002ce:	400b      	ands	r3, r1
 80002d0:	6013      	str	r3, [r2, #0]
            GPIOC_CRH |= (copy_u8Mode << (copy_u8PIN*4));
 80002d2:	4b10      	ldr	r3, [pc, #64]	; (8000314 <GPIO_voidSetPinDirection+0x1a4>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	7979      	ldrb	r1, [r7, #5]
 80002d8:	79ba      	ldrb	r2, [r7, #6]
 80002da:	0092      	lsls	r2, r2, #2
 80002dc:	fa01 f202 	lsl.w	r2, r1, r2
 80002e0:	4611      	mov	r1, r2
 80002e2:	4a0c      	ldr	r2, [pc, #48]	; (8000314 <GPIO_voidSetPinDirection+0x1a4>)
 80002e4:	430b      	orrs	r3, r1
 80002e6:	6013      	str	r3, [r2, #0]
        break;
 80002e8:	e003      	b.n	80002f2 <GPIO_voidSetPinDirection+0x182>
        break;
 80002ea:	bf00      	nop
 80002ec:	e002      	b.n	80002f4 <GPIO_voidSetPinDirection+0x184>
        break;
 80002ee:	bf00      	nop
 80002f0:	e000      	b.n	80002f4 <GPIO_voidSetPinDirection+0x184>
        break;
 80002f2:	bf00      	nop
    }
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bc80      	pop	{r7}
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40010800 	.word	0x40010800
 8000304:	40010804 	.word	0x40010804
 8000308:	40010c00 	.word	0x40010c00
 800030c:	40010c04 	.word	0x40010c04
 8000310:	40011000 	.word	0x40011000
 8000314:	40011004 	.word	0x40011004

08000318 <GPIO_voidSetPinValue>:




void GPIO_voidSetPinValue(u8 copy_u8PORT, u8 copy_u8PIN, u8 copy_u8Value){
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
 8000322:	460b      	mov	r3, r1
 8000324:	71bb      	strb	r3, [r7, #6]
 8000326:	4613      	mov	r3, r2
 8000328:	717b      	strb	r3, [r7, #5]
switch(copy_u8PORT){
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	2b01      	cmp	r3, #1
 800032e:	d021      	beq.n	8000374 <GPIO_voidSetPinValue+0x5c>
 8000330:	2b02      	cmp	r3, #2
 8000332:	d03c      	beq.n	80003ae <GPIO_voidSetPinValue+0x96>
 8000334:	2b00      	cmp	r3, #0
 8000336:	d000      	beq.n	800033a <GPIO_voidSetPinValue+0x22>
                SET_BIT(GPIOC_ODR, copy_u8PIN);
            }else if(copy_u8Value == GPIO_LOW){
            	CLR_BIT(GPIOC_ODR, copy_u8PIN);
            }
            break;
    default: break;
 8000338:	e05b      	b.n	80003f2 <GPIO_voidSetPinValue+0xda>
            if(copy_u8Value == GPIO_HIGH){
 800033a:	797b      	ldrb	r3, [r7, #5]
 800033c:	2b01      	cmp	r3, #1
 800033e:	d10a      	bne.n	8000356 <GPIO_voidSetPinValue+0x3e>
                SET_BIT(GPIOA_ODR, copy_u8PIN);
 8000340:	4b2e      	ldr	r3, [pc, #184]	; (80003fc <GPIO_voidSetPinValue+0xe4>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	79ba      	ldrb	r2, [r7, #6]
 8000346:	2101      	movs	r1, #1
 8000348:	fa01 f202 	lsl.w	r2, r1, r2
 800034c:	4611      	mov	r1, r2
 800034e:	4a2b      	ldr	r2, [pc, #172]	; (80003fc <GPIO_voidSetPinValue+0xe4>)
 8000350:	430b      	orrs	r3, r1
 8000352:	6013      	str	r3, [r2, #0]
            break;
 8000354:	e048      	b.n	80003e8 <GPIO_voidSetPinValue+0xd0>
            }else if(copy_u8Value == GPIO_LOW){
 8000356:	797b      	ldrb	r3, [r7, #5]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d145      	bne.n	80003e8 <GPIO_voidSetPinValue+0xd0>
                CLR_BIT(GPIOA_ODR, copy_u8PIN);
 800035c:	4b27      	ldr	r3, [pc, #156]	; (80003fc <GPIO_voidSetPinValue+0xe4>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	79ba      	ldrb	r2, [r7, #6]
 8000362:	2101      	movs	r1, #1
 8000364:	fa01 f202 	lsl.w	r2, r1, r2
 8000368:	43d2      	mvns	r2, r2
 800036a:	4611      	mov	r1, r2
 800036c:	4a23      	ldr	r2, [pc, #140]	; (80003fc <GPIO_voidSetPinValue+0xe4>)
 800036e:	400b      	ands	r3, r1
 8000370:	6013      	str	r3, [r2, #0]
            break;
 8000372:	e039      	b.n	80003e8 <GPIO_voidSetPinValue+0xd0>
            if(copy_u8Value == GPIO_HIGH){
 8000374:	797b      	ldrb	r3, [r7, #5]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d10a      	bne.n	8000390 <GPIO_voidSetPinValue+0x78>
                SET_BIT(GPIOB_ODR, copy_u8PIN);
 800037a:	4b21      	ldr	r3, [pc, #132]	; (8000400 <GPIO_voidSetPinValue+0xe8>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	79ba      	ldrb	r2, [r7, #6]
 8000380:	2101      	movs	r1, #1
 8000382:	fa01 f202 	lsl.w	r2, r1, r2
 8000386:	4611      	mov	r1, r2
 8000388:	4a1d      	ldr	r2, [pc, #116]	; (8000400 <GPIO_voidSetPinValue+0xe8>)
 800038a:	430b      	orrs	r3, r1
 800038c:	6013      	str	r3, [r2, #0]
            break;
 800038e:	e02d      	b.n	80003ec <GPIO_voidSetPinValue+0xd4>
            }else if(copy_u8Value == GPIO_LOW){
 8000390:	797b      	ldrb	r3, [r7, #5]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d12a      	bne.n	80003ec <GPIO_voidSetPinValue+0xd4>
            	CLR_BIT(GPIOB_ODR, copy_u8PIN);
 8000396:	4b1a      	ldr	r3, [pc, #104]	; (8000400 <GPIO_voidSetPinValue+0xe8>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	79ba      	ldrb	r2, [r7, #6]
 800039c:	2101      	movs	r1, #1
 800039e:	fa01 f202 	lsl.w	r2, r1, r2
 80003a2:	43d2      	mvns	r2, r2
 80003a4:	4611      	mov	r1, r2
 80003a6:	4a16      	ldr	r2, [pc, #88]	; (8000400 <GPIO_voidSetPinValue+0xe8>)
 80003a8:	400b      	ands	r3, r1
 80003aa:	6013      	str	r3, [r2, #0]
            break;
 80003ac:	e01e      	b.n	80003ec <GPIO_voidSetPinValue+0xd4>
            if(copy_u8Value == GPIO_HIGH){
 80003ae:	797b      	ldrb	r3, [r7, #5]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d10a      	bne.n	80003ca <GPIO_voidSetPinValue+0xb2>
                SET_BIT(GPIOC_ODR, copy_u8PIN);
 80003b4:	4b13      	ldr	r3, [pc, #76]	; (8000404 <GPIO_voidSetPinValue+0xec>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	79ba      	ldrb	r2, [r7, #6]
 80003ba:	2101      	movs	r1, #1
 80003bc:	fa01 f202 	lsl.w	r2, r1, r2
 80003c0:	4611      	mov	r1, r2
 80003c2:	4a10      	ldr	r2, [pc, #64]	; (8000404 <GPIO_voidSetPinValue+0xec>)
 80003c4:	430b      	orrs	r3, r1
 80003c6:	6013      	str	r3, [r2, #0]
            break;
 80003c8:	e012      	b.n	80003f0 <GPIO_voidSetPinValue+0xd8>
            }else if(copy_u8Value == GPIO_LOW){
 80003ca:	797b      	ldrb	r3, [r7, #5]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d10f      	bne.n	80003f0 <GPIO_voidSetPinValue+0xd8>
            	CLR_BIT(GPIOC_ODR, copy_u8PIN);
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <GPIO_voidSetPinValue+0xec>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	79ba      	ldrb	r2, [r7, #6]
 80003d6:	2101      	movs	r1, #1
 80003d8:	fa01 f202 	lsl.w	r2, r1, r2
 80003dc:	43d2      	mvns	r2, r2
 80003de:	4611      	mov	r1, r2
 80003e0:	4a08      	ldr	r2, [pc, #32]	; (8000404 <GPIO_voidSetPinValue+0xec>)
 80003e2:	400b      	ands	r3, r1
 80003e4:	6013      	str	r3, [r2, #0]
            break;
 80003e6:	e003      	b.n	80003f0 <GPIO_voidSetPinValue+0xd8>
            break;
 80003e8:	bf00      	nop
 80003ea:	e002      	b.n	80003f2 <GPIO_voidSetPinValue+0xda>
            break;
 80003ec:	bf00      	nop
 80003ee:	e000      	b.n	80003f2 <GPIO_voidSetPinValue+0xda>
            break;
 80003f0:	bf00      	nop
}
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	4001080c 	.word	0x4001080c
 8000400:	40010c0c 	.word	0x40010c0c
 8000404:	4001100c 	.word	0x4001100c

08000408 <HLEDMRX_voidInit>:
#include"GPIO_interface.h"
#include"SYSTICK_interface.h"
#include"LEDMRX_private.h"
#include"LEDMRX_config.h"

void HLEDMRX_voidInit(void){
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0

    GPIO_voidSetPinDirection(LEDMRX_ROW0_PIN,OUTPUT_SPEED_2MHZ_PP);
 800040c:	2201      	movs	r2, #1
 800040e:	2100      	movs	r1, #0
 8000410:	2000      	movs	r0, #0
 8000412:	f7ff fead 	bl	8000170 <GPIO_voidSetPinDirection>
    GPIO_voidSetPinDirection(LEDMRX_ROW1_PIN,OUTPUT_SPEED_2MHZ_PP);
 8000416:	2201      	movs	r2, #1
 8000418:	2101      	movs	r1, #1
 800041a:	2000      	movs	r0, #0
 800041c:	f7ff fea8 	bl	8000170 <GPIO_voidSetPinDirection>
    GPIO_voidSetPinDirection(LEDMRX_ROW2_PIN,OUTPUT_SPEED_2MHZ_PP);
 8000420:	2201      	movs	r2, #1
 8000422:	2102      	movs	r1, #2
 8000424:	2000      	movs	r0, #0
 8000426:	f7ff fea3 	bl	8000170 <GPIO_voidSetPinDirection>
    GPIO_voidSetPinDirection(LEDMRX_ROW3_PIN,OUTPUT_SPEED_2MHZ_PP);
 800042a:	2201      	movs	r2, #1
 800042c:	2103      	movs	r1, #3
 800042e:	2000      	movs	r0, #0
 8000430:	f7ff fe9e 	bl	8000170 <GPIO_voidSetPinDirection>
    GPIO_voidSetPinDirection(LEDMRX_ROW4_PIN,OUTPUT_SPEED_2MHZ_PP);
 8000434:	2201      	movs	r2, #1
 8000436:	2104      	movs	r1, #4
 8000438:	2000      	movs	r0, #0
 800043a:	f7ff fe99 	bl	8000170 <GPIO_voidSetPinDirection>
    GPIO_voidSetPinDirection(LEDMRX_ROW5_PIN,OUTPUT_SPEED_2MHZ_PP);
 800043e:	2201      	movs	r2, #1
 8000440:	2105      	movs	r1, #5
 8000442:	2000      	movs	r0, #0
 8000444:	f7ff fe94 	bl	8000170 <GPIO_voidSetPinDirection>
    GPIO_voidSetPinDirection(LEDMRX_ROW6_PIN,OUTPUT_SPEED_2MHZ_PP);
 8000448:	2201      	movs	r2, #1
 800044a:	2106      	movs	r1, #6
 800044c:	2000      	movs	r0, #0
 800044e:	f7ff fe8f 	bl	8000170 <GPIO_voidSetPinDirection>
    GPIO_voidSetPinDirection(LEDMRX_ROW7_PIN,OUTPUT_SPEED_2MHZ_PP);
 8000452:	2201      	movs	r2, #1
 8000454:	2107      	movs	r1, #7
 8000456:	2000      	movs	r0, #0
 8000458:	f7ff fe8a 	bl	8000170 <GPIO_voidSetPinDirection>

    GPIO_voidSetPinDirection(LEDMRX_COL0_PIN,OUTPUT_SPEED_2MHZ_PP);
 800045c:	2201      	movs	r2, #1
 800045e:	2100      	movs	r1, #0
 8000460:	2001      	movs	r0, #1
 8000462:	f7ff fe85 	bl	8000170 <GPIO_voidSetPinDirection>
    GPIO_voidSetPinDirection(LEDMRX_COL1_PIN,OUTPUT_SPEED_2MHZ_PP);
 8000466:	2201      	movs	r2, #1
 8000468:	2101      	movs	r1, #1
 800046a:	2001      	movs	r0, #1
 800046c:	f7ff fe80 	bl	8000170 <GPIO_voidSetPinDirection>
    GPIO_voidSetPinDirection(LEDMRX_COL2_PIN,OUTPUT_SPEED_2MHZ_PP);
 8000470:	2201      	movs	r2, #1
 8000472:	2105      	movs	r1, #5
 8000474:	2001      	movs	r0, #1
 8000476:	f7ff fe7b 	bl	8000170 <GPIO_voidSetPinDirection>
    GPIO_voidSetPinDirection(LEDMRX_COL3_PIN,OUTPUT_SPEED_2MHZ_PP);
 800047a:	2201      	movs	r2, #1
 800047c:	2106      	movs	r1, #6
 800047e:	2001      	movs	r0, #1
 8000480:	f7ff fe76 	bl	8000170 <GPIO_voidSetPinDirection>
    GPIO_voidSetPinDirection(LEDMRX_COL4_PIN,OUTPUT_SPEED_2MHZ_PP);
 8000484:	2201      	movs	r2, #1
 8000486:	2107      	movs	r1, #7
 8000488:	2001      	movs	r0, #1
 800048a:	f7ff fe71 	bl	8000170 <GPIO_voidSetPinDirection>
    GPIO_voidSetPinDirection(LEDMRX_COL5_PIN,OUTPUT_SPEED_2MHZ_PP);
 800048e:	2201      	movs	r2, #1
 8000490:	2108      	movs	r1, #8
 8000492:	2001      	movs	r0, #1
 8000494:	f7ff fe6c 	bl	8000170 <GPIO_voidSetPinDirection>
    GPIO_voidSetPinDirection(LEDMRX_COL6_PIN,OUTPUT_SPEED_2MHZ_PP);
 8000498:	2201      	movs	r2, #1
 800049a:	2109      	movs	r1, #9
 800049c:	2001      	movs	r0, #1
 800049e:	f7ff fe67 	bl	8000170 <GPIO_voidSetPinDirection>
    GPIO_voidSetPinDirection(LEDMRX_COL7_PIN,OUTPUT_SPEED_2MHZ_PP);
 80004a2:	2201      	movs	r2, #1
 80004a4:	210a      	movs	r1, #10
 80004a6:	2001      	movs	r0, #1
 80004a8:	f7ff fe62 	bl	8000170 <GPIO_voidSetPinDirection>
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <LEDMRX_voidDisplay>:

void LEDMRX_voidDisplay(u8 *Copy_u8Data){
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	  u32 i=0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
while(i<20){
 80004bc:	e089      	b.n	80005d2 <LEDMRX_voidDisplay+0x122>
    LEDMRX_voidDisableAllCol();
 80004be:	f000 f890 	bl	80005e2 <LEDMRX_voidDisableAllCol>
    GPIO_voidSetPinValue(LEDMRX_COL0_PIN,GPIO_LOW);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2100      	movs	r1, #0
 80004c6:	2001      	movs	r0, #1
 80004c8:	f7ff ff26 	bl	8000318 <GPIO_voidSetPinValue>
    LEDMRX_voidSetRow(Copy_u8Data[0]);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 f8b2 	bl	800063a <LEDMRX_voidSetRow>
    MSTK_voidSetBusyWait(2500);
 80004d6:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80004da:	f000 f999 	bl	8000810 <MSTK_voidSetBusyWait>

    LEDMRX_voidDisableAllCol();
 80004de:	f000 f880 	bl	80005e2 <LEDMRX_voidDisableAllCol>
    GPIO_voidSetPinValue(LEDMRX_COL1_PIN,GPIO_LOW);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2101      	movs	r1, #1
 80004e6:	2001      	movs	r0, #1
 80004e8:	f7ff ff16 	bl	8000318 <GPIO_voidSetPinValue>
    LEDMRX_voidSetRow(Copy_u8Data[1]);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3301      	adds	r3, #1
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 f8a1 	bl	800063a <LEDMRX_voidSetRow>
    MSTK_voidSetBusyWait(2500);
 80004f8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80004fc:	f000 f988 	bl	8000810 <MSTK_voidSetBusyWait>

    LEDMRX_voidDisableAllCol();
 8000500:	f000 f86f 	bl	80005e2 <LEDMRX_voidDisableAllCol>
    GPIO_voidSetPinValue(LEDMRX_COL2_PIN,GPIO_LOW);
 8000504:	2200      	movs	r2, #0
 8000506:	2105      	movs	r1, #5
 8000508:	2001      	movs	r0, #1
 800050a:	f7ff ff05 	bl	8000318 <GPIO_voidSetPinValue>
    LEDMRX_voidSetRow(Copy_u8Data[2]);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	3302      	adds	r3, #2
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4618      	mov	r0, r3
 8000516:	f000 f890 	bl	800063a <LEDMRX_voidSetRow>
    MSTK_voidSetBusyWait(2500);
 800051a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800051e:	f000 f977 	bl	8000810 <MSTK_voidSetBusyWait>

        LEDMRX_voidDisableAllCol();
 8000522:	f000 f85e 	bl	80005e2 <LEDMRX_voidDisableAllCol>
    GPIO_voidSetPinValue(LEDMRX_COL3_PIN,GPIO_LOW);
 8000526:	2200      	movs	r2, #0
 8000528:	2106      	movs	r1, #6
 800052a:	2001      	movs	r0, #1
 800052c:	f7ff fef4 	bl	8000318 <GPIO_voidSetPinValue>
    LEDMRX_voidSetRow(Copy_u8Data[3]);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	3303      	adds	r3, #3
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f87f 	bl	800063a <LEDMRX_voidSetRow>
    MSTK_voidSetBusyWait(2500);
 800053c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000540:	f000 f966 	bl	8000810 <MSTK_voidSetBusyWait>

        LEDMRX_voidDisableAllCol();
 8000544:	f000 f84d 	bl	80005e2 <LEDMRX_voidDisableAllCol>
    GPIO_voidSetPinValue(LEDMRX_COL4_PIN,GPIO_LOW);
 8000548:	2200      	movs	r2, #0
 800054a:	2107      	movs	r1, #7
 800054c:	2001      	movs	r0, #1
 800054e:	f7ff fee3 	bl	8000318 <GPIO_voidSetPinValue>
    LEDMRX_voidSetRow(Copy_u8Data[4]);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	3304      	adds	r3, #4
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4618      	mov	r0, r3
 800055a:	f000 f86e 	bl	800063a <LEDMRX_voidSetRow>
    MSTK_voidSetBusyWait(2500);
 800055e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000562:	f000 f955 	bl	8000810 <MSTK_voidSetBusyWait>

        LEDMRX_voidDisableAllCol();
 8000566:	f000 f83c 	bl	80005e2 <LEDMRX_voidDisableAllCol>
    GPIO_voidSetPinValue(LEDMRX_COL5_PIN,GPIO_LOW);
 800056a:	2200      	movs	r2, #0
 800056c:	2108      	movs	r1, #8
 800056e:	2001      	movs	r0, #1
 8000570:	f7ff fed2 	bl	8000318 <GPIO_voidSetPinValue>
    LEDMRX_voidSetRow(Copy_u8Data[5]);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3305      	adds	r3, #5
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	4618      	mov	r0, r3
 800057c:	f000 f85d 	bl	800063a <LEDMRX_voidSetRow>
    MSTK_voidSetBusyWait(2500);
 8000580:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000584:	f000 f944 	bl	8000810 <MSTK_voidSetBusyWait>

    LEDMRX_voidDisableAllCol();
 8000588:	f000 f82b 	bl	80005e2 <LEDMRX_voidDisableAllCol>
    GPIO_voidSetPinValue(LEDMRX_COL6_PIN,GPIO_LOW);
 800058c:	2200      	movs	r2, #0
 800058e:	2109      	movs	r1, #9
 8000590:	2001      	movs	r0, #1
 8000592:	f7ff fec1 	bl	8000318 <GPIO_voidSetPinValue>
    LEDMRX_voidSetRow(Copy_u8Data[6]);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	3306      	adds	r3, #6
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	4618      	mov	r0, r3
 800059e:	f000 f84c 	bl	800063a <LEDMRX_voidSetRow>
    MSTK_voidSetBusyWait(2500);
 80005a2:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80005a6:	f000 f933 	bl	8000810 <MSTK_voidSetBusyWait>

    LEDMRX_voidDisableAllCol();
 80005aa:	f000 f81a 	bl	80005e2 <LEDMRX_voidDisableAllCol>
    GPIO_voidSetPinValue(LEDMRX_COL7_PIN,GPIO_LOW);
 80005ae:	2200      	movs	r2, #0
 80005b0:	210a      	movs	r1, #10
 80005b2:	2001      	movs	r0, #1
 80005b4:	f7ff feb0 	bl	8000318 <GPIO_voidSetPinValue>
    LEDMRX_voidSetRow(Copy_u8Data[7]);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3307      	adds	r3, #7
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f83b 	bl	800063a <LEDMRX_voidSetRow>
    MSTK_voidSetBusyWait(2500);
 80005c4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80005c8:	f000 f922 	bl	8000810 <MSTK_voidSetBusyWait>

i = i + 1;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	3301      	adds	r3, #1
 80005d0:	60fb      	str	r3, [r7, #12]
while(i<20){
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	2b13      	cmp	r3, #19
 80005d6:	f67f af72 	bls.w	80004be <LEDMRX_voidDisplay+0xe>
}
}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <LEDMRX_voidDisableAllCol>:

static void LEDMRX_voidDisableAllCol(){
 80005e2:	b580      	push	{r7, lr}
 80005e4:	af00      	add	r7, sp, #0
    GPIO_voidSetPinValue(LEDMRX_COL0_PIN,GPIO_HIGH);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2100      	movs	r1, #0
 80005ea:	2001      	movs	r0, #1
 80005ec:	f7ff fe94 	bl	8000318 <GPIO_voidSetPinValue>
    GPIO_voidSetPinValue(LEDMRX_COL1_PIN,GPIO_HIGH);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2101      	movs	r1, #1
 80005f4:	2001      	movs	r0, #1
 80005f6:	f7ff fe8f 	bl	8000318 <GPIO_voidSetPinValue>
    GPIO_voidSetPinValue(LEDMRX_COL2_PIN,GPIO_HIGH);
 80005fa:	2201      	movs	r2, #1
 80005fc:	2105      	movs	r1, #5
 80005fe:	2001      	movs	r0, #1
 8000600:	f7ff fe8a 	bl	8000318 <GPIO_voidSetPinValue>
    GPIO_voidSetPinValue(LEDMRX_COL3_PIN,GPIO_HIGH);
 8000604:	2201      	movs	r2, #1
 8000606:	2106      	movs	r1, #6
 8000608:	2001      	movs	r0, #1
 800060a:	f7ff fe85 	bl	8000318 <GPIO_voidSetPinValue>
    GPIO_voidSetPinValue(LEDMRX_COL4_PIN,GPIO_HIGH);
 800060e:	2201      	movs	r2, #1
 8000610:	2107      	movs	r1, #7
 8000612:	2001      	movs	r0, #1
 8000614:	f7ff fe80 	bl	8000318 <GPIO_voidSetPinValue>
    GPIO_voidSetPinValue(LEDMRX_COL5_PIN,GPIO_HIGH);
 8000618:	2201      	movs	r2, #1
 800061a:	2108      	movs	r1, #8
 800061c:	2001      	movs	r0, #1
 800061e:	f7ff fe7b 	bl	8000318 <GPIO_voidSetPinValue>
    GPIO_voidSetPinValue(LEDMRX_COL6_PIN,GPIO_HIGH);
 8000622:	2201      	movs	r2, #1
 8000624:	2109      	movs	r1, #9
 8000626:	2001      	movs	r0, #1
 8000628:	f7ff fe76 	bl	8000318 <GPIO_voidSetPinValue>
    GPIO_voidSetPinValue(LEDMRX_COL7_PIN,GPIO_HIGH);
 800062c:	2201      	movs	r2, #1
 800062e:	210a      	movs	r1, #10
 8000630:	2001      	movs	r0, #1
 8000632:	f7ff fe71 	bl	8000318 <GPIO_voidSetPinValue>


}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}

0800063a <LEDMRX_voidSetRow>:
static void LEDMRX_voidSetRow(u8 Copy_u8Data){
 800063a:	b580      	push	{r7, lr}
 800063c:	b084      	sub	sp, #16
 800063e:	af00      	add	r7, sp, #0
 8000640:	4603      	mov	r3, r0
 8000642:	71fb      	strb	r3, [r7, #7]
    u8 local_u8Bit;
    local_u8Bit = GET_BIT(Copy_u8Data, 0);
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	73fb      	strb	r3, [r7, #15]
    GPIO_voidSetPinValue(LEDMRX_ROW0_PIN,local_u8Bit);
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	461a      	mov	r2, r3
 8000650:	2100      	movs	r1, #0
 8000652:	2000      	movs	r0, #0
 8000654:	f7ff fe60 	bl	8000318 <GPIO_voidSetPinValue>
     local_u8Bit = GET_BIT(Copy_u8Data, 1);
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	085b      	lsrs	r3, r3, #1
 800065c:	b2db      	uxtb	r3, r3
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	73fb      	strb	r3, [r7, #15]
    GPIO_voidSetPinValue(LEDMRX_ROW1_PIN,local_u8Bit);
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	461a      	mov	r2, r3
 8000668:	2101      	movs	r1, #1
 800066a:	2000      	movs	r0, #0
 800066c:	f7ff fe54 	bl	8000318 <GPIO_voidSetPinValue>
     local_u8Bit = GET_BIT(Copy_u8Data, 2);
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	089b      	lsrs	r3, r3, #2
 8000674:	b2db      	uxtb	r3, r3
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	73fb      	strb	r3, [r7, #15]
    GPIO_voidSetPinValue(LEDMRX_ROW2_PIN,local_u8Bit);
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	461a      	mov	r2, r3
 8000680:	2102      	movs	r1, #2
 8000682:	2000      	movs	r0, #0
 8000684:	f7ff fe48 	bl	8000318 <GPIO_voidSetPinValue>
     local_u8Bit = GET_BIT(Copy_u8Data, 3);
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	08db      	lsrs	r3, r3, #3
 800068c:	b2db      	uxtb	r3, r3
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	73fb      	strb	r3, [r7, #15]
    GPIO_voidSetPinValue(LEDMRX_ROW3_PIN,local_u8Bit);
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	461a      	mov	r2, r3
 8000698:	2103      	movs	r1, #3
 800069a:	2000      	movs	r0, #0
 800069c:	f7ff fe3c 	bl	8000318 <GPIO_voidSetPinValue>
     local_u8Bit = GET_BIT(Copy_u8Data, 4);
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	091b      	lsrs	r3, r3, #4
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	73fb      	strb	r3, [r7, #15]
    GPIO_voidSetPinValue(LEDMRX_ROW4_PIN,local_u8Bit);
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	461a      	mov	r2, r3
 80006b0:	2104      	movs	r1, #4
 80006b2:	2000      	movs	r0, #0
 80006b4:	f7ff fe30 	bl	8000318 <GPIO_voidSetPinValue>
    local_u8Bit = GET_BIT(Copy_u8Data, 5);
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	095b      	lsrs	r3, r3, #5
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	73fb      	strb	r3, [r7, #15]
    GPIO_voidSetPinValue(LEDMRX_ROW5_PIN,local_u8Bit);
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	461a      	mov	r2, r3
 80006c8:	2105      	movs	r1, #5
 80006ca:	2000      	movs	r0, #0
 80006cc:	f7ff fe24 	bl	8000318 <GPIO_voidSetPinValue>
     local_u8Bit = GET_BIT(Copy_u8Data, 6);
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	099b      	lsrs	r3, r3, #6
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	73fb      	strb	r3, [r7, #15]
    GPIO_voidSetPinValue(LEDMRX_ROW6_PIN,local_u8Bit);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	461a      	mov	r2, r3
 80006e0:	2106      	movs	r1, #6
 80006e2:	2000      	movs	r0, #0
 80006e4:	f7ff fe18 	bl	8000318 <GPIO_voidSetPinValue>
     local_u8Bit = GET_BIT(Copy_u8Data, 7);
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	09db      	lsrs	r3, r3, #7
 80006ec:	73fb      	strb	r3, [r7, #15]
    GPIO_voidSetPinValue(LEDMRX_ROW7_PIN,local_u8Bit);
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	461a      	mov	r2, r3
 80006f2:	2107      	movs	r1, #7
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff fe0f 	bl	8000318 <GPIO_voidSetPinValue>

}
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <LEDMRX_voidShift>:

void LEDMRX_voidShift(u8 *Copy_u8Data){
 8000702:	b480      	push	{r7}
 8000704:	b085      	sub	sp, #20
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]

//
	for(int i=0;i<49;i++){
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	e010      	b.n	8000732 <LEDMRX_voidShift+0x30>
		if(i == 0){
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d009      	beq.n	800072a <LEDMRX_voidShift+0x28>
			continue;
		}
		Copy_u8Data[i-1] = Copy_u8Data[i];
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	441a      	add	r2, r3
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	3b01      	subs	r3, #1
 8000720:	6879      	ldr	r1, [r7, #4]
 8000722:	440b      	add	r3, r1
 8000724:	7812      	ldrb	r2, [r2, #0]
 8000726:	701a      	strb	r2, [r3, #0]
 8000728:	e000      	b.n	800072c <LEDMRX_voidShift+0x2a>
			continue;
 800072a:	bf00      	nop
	for(int i=0;i<49;i++){
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	3301      	adds	r3, #1
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	2b30      	cmp	r3, #48	; 0x30
 8000736:	ddeb      	ble.n	8000710 <LEDMRX_voidShift+0xe>
	}




}
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
	...

08000744 <RCC_voidInitSysClock>:
#include  "BIT_MATH.h"
#include "RCC_interface.h"
#include "RCC_private.h"
#include "RCC_config.h"

void RCC_voidInitSysClock(void){
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
            #if RCC_PLL_IN_HSE_TYPE == RCC_HSE_CRYSTAL /* HSE crystal input for PLL */
            RCC_CFGR = 0x00000000;
            RCC_CFGR = (RCC_PLL_MUL_VAL << 18)+0x00030002;
            RCC_CR = 0x01010000;
            #elif RCC_PLL_IN_HSE_TYPE == RCC_HSE_RC
            RCC_CFGR = 0x00000000;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <RCC_voidInitSysClock+0x20>)
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
            RCC_CFGR = (RCC_PLL_MUL_VAL << 18)+0x00030002;
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <RCC_voidInitSysClock+0x20>)
 8000750:	4a05      	ldr	r2, [pc, #20]	; (8000768 <RCC_voidInitSysClock+0x24>)
 8000752:	601a      	str	r2, [r3, #0]
            RCC_CR = 0x01050000;
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <RCC_voidInitSysClock+0x28>)
 8000756:	4a06      	ldr	r2, [pc, #24]	; (8000770 <RCC_voidInitSysClock+0x2c>)
 8000758:	601a      	str	r2, [r3, #0]
	#endif
    #else
        // #error("wrong clock type")
#endif
   
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40021004 	.word	0x40021004
 8000768:	00070002 	.word	0x00070002
 800076c:	40021000 	.word	0x40021000
 8000770:	01050000 	.word	0x01050000

08000774 <RCC_voidEnableClock>:
void RCC_voidEnableClock(u8 Copy_u8BusId, u8 Copy_u8PerId){
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	71fb      	strb	r3, [r7, #7]
 8000780:	4613      	mov	r3, r2
 8000782:	71bb      	strb	r3, [r7, #6]
    if( Copy_u8PerId <= 31)
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	2b1f      	cmp	r3, #31
 8000788:	d828      	bhi.n	80007dc <RCC_voidEnableClock+0x68>
    {
        switch (Copy_u8BusId)
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d00f      	beq.n	80007b0 <RCC_voidEnableClock+0x3c>
 8000790:	2b02      	cmp	r3, #2
 8000792:	d018      	beq.n	80007c6 <RCC_voidEnableClock+0x52>
 8000794:	2b00      	cmp	r3, #0
 8000796:	d000      	beq.n	800079a <RCC_voidEnableClock+0x26>
    else
    {
        /* return error*/
    }
    
}
 8000798:	e020      	b.n	80007dc <RCC_voidEnableClock+0x68>
            case RCC_AHB    : SET_BIT(RCC_AHBENR, Copy_u8PerId);break;
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <RCC_voidEnableClock+0x74>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	79ba      	ldrb	r2, [r7, #6]
 80007a0:	2101      	movs	r1, #1
 80007a2:	fa01 f202 	lsl.w	r2, r1, r2
 80007a6:	4611      	mov	r1, r2
 80007a8:	4a0f      	ldr	r2, [pc, #60]	; (80007e8 <RCC_voidEnableClock+0x74>)
 80007aa:	430b      	orrs	r3, r1
 80007ac:	6013      	str	r3, [r2, #0]
 80007ae:	e015      	b.n	80007dc <RCC_voidEnableClock+0x68>
            case RCC_APB1   : SET_BIT(RCC_APB1ENR, Copy_u8PerId);break;
 80007b0:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <RCC_voidEnableClock+0x78>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	79ba      	ldrb	r2, [r7, #6]
 80007b6:	2101      	movs	r1, #1
 80007b8:	fa01 f202 	lsl.w	r2, r1, r2
 80007bc:	4611      	mov	r1, r2
 80007be:	4a0b      	ldr	r2, [pc, #44]	; (80007ec <RCC_voidEnableClock+0x78>)
 80007c0:	430b      	orrs	r3, r1
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	e00a      	b.n	80007dc <RCC_voidEnableClock+0x68>
            case RCC_APB2   : SET_BIT(RCC_APB2ENR, Copy_u8PerId);break;
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <RCC_voidEnableClock+0x7c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	79ba      	ldrb	r2, [r7, #6]
 80007cc:	2101      	movs	r1, #1
 80007ce:	fa01 f202 	lsl.w	r2, r1, r2
 80007d2:	4611      	mov	r1, r2
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <RCC_voidEnableClock+0x7c>)
 80007d6:	430b      	orrs	r3, r1
 80007d8:	6013      	str	r3, [r2, #0]
 80007da:	bf00      	nop
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40021014 	.word	0x40021014
 80007ec:	4002101c 	.word	0x4002101c
 80007f0:	40021018 	.word	0x40021018

080007f4 <MSTK_voidInit>:
#include"SYSTICK_config.h"
#include"SYSTICK_interface.h"

void (* callback)(void);

void MSTK_voidInit(void){
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
    #if STK_CLOCK_SOURCE == STK_AHB_DIV_8
        CLR_BIT(STK_CTRL,2);
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <MSTK_voidInit+0x18>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a03      	ldr	r2, [pc, #12]	; (800080c <MSTK_voidInit+0x18>)
 80007fe:	f023 0304 	bic.w	r3, r3, #4
 8000802:	6013      	str	r3, [r2, #0]
    #elif STK_CLOCK_SOURCE == STK_AHB
        SET_BIT(STK_CTRL,2);
    #endif
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	e000e010 	.word	0xe000e010

08000810 <MSTK_voidSetBusyWait>:


void MSTK_voidSetBusyWait(u32 Copy_u32Ticks){
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
    STK_LOAD = Copy_u32Ticks;
 8000818:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <MSTK_voidSetBusyWait+0x34>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6013      	str	r3, [r2, #0]
    SET_BIT(STK_CTRL,0);
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MSTK_voidSetBusyWait+0x38>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a09      	ldr	r2, [pc, #36]	; (8000848 <MSTK_voidSetBusyWait+0x38>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6013      	str	r3, [r2, #0]
    while(GET_BIT(STK_CTRL, 16) == 0);
 800082a:	bf00      	nop
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MSTK_voidSetBusyWait+0x38>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	0c1b      	lsrs	r3, r3, #16
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0f8      	beq.n	800082c <MSTK_voidSetBusyWait+0x1c>
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	e000e014 	.word	0xe000e014
 8000848:	e000e010 	.word	0xe000e010

0800084c <SysTick_Handler>:



/* ISA */

void SysTick_Handler(void){
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
    
    callback();
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <SysTick_Handler+0x24>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4798      	blx	r3
    if(stopIntervalFlag == 0){
 8000856:	4b07      	ldr	r3, [pc, #28]	; (8000874 <SysTick_Handler+0x28>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d105      	bne.n	800086a <SysTick_Handler+0x1e>
        CLR_BIT(STK_CTRL,1);
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <SysTick_Handler+0x2c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <SysTick_Handler+0x2c>)
 8000864:	f023 0302 	bic.w	r3, r3, #2
 8000868:	6013      	str	r3, [r2, #0]
    }

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000050 	.word	0x20000050
 8000874:	20000000 	.word	0x20000000
 8000878:	e000e010 	.word	0xe000e010

0800087c <main>:
				252,8,16,8,252,0,0,
				248,168,168,0,0,
				248,136,112,0,0};

int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

	RCC_voidInitSysClock();
 8000880:	f7ff ff60 	bl	8000744 <RCC_voidInitSysClock>
	RCC_voidEnableClock(RCC_APB2, 2);
 8000884:	2102      	movs	r1, #2
 8000886:	2002      	movs	r0, #2
 8000888:	f7ff ff74 	bl	8000774 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2, 3);
 800088c:	2103      	movs	r1, #3
 800088e:	2002      	movs	r0, #2
 8000890:	f7ff ff70 	bl	8000774 <RCC_voidEnableClock>
	MSTK_voidInit();
 8000894:	f7ff ffae 	bl	80007f4 <MSTK_voidInit>
	HLEDMRX_voidInit();
 8000898:	f7ff fdb6 	bl	8000408 <HLEDMRX_voidInit>
	//		LEDMRX_voidShift(DataArray);

	while(1){

		LEDMRX_voidDisplay(DataArray);
 800089c:	4803      	ldr	r0, [pc, #12]	; (80008ac <main+0x30>)
 800089e:	f7ff fe07 	bl	80004b0 <LEDMRX_voidDisplay>
		LEDMRX_voidShift(DataArray);
 80008a2:	4802      	ldr	r0, [pc, #8]	; (80008ac <main+0x30>)
 80008a4:	f7ff ff2d 	bl	8000702 <LEDMRX_voidShift>
		LEDMRX_voidDisplay(DataArray);
 80008a8:	e7f8      	b.n	800089c <main+0x20>
 80008aa:	bf00      	nop
 80008ac:	20000004 	.word	0x20000004

080008b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008b0:	480d      	ldr	r0, [pc, #52]	; (80008e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <LoopForever+0x6>)
  ldr r1, =_edata
 80008b6:	490e      	ldr	r1, [pc, #56]	; (80008f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b8:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <LoopForever+0xe>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008bc:	e002      	b.n	80008c4 <LoopCopyDataInit>

080008be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c2:	3304      	adds	r3, #4

080008c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c8:	d3f9      	bcc.n	80008be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ca:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008cc:	4c0b      	ldr	r4, [pc, #44]	; (80008fc <LoopForever+0x16>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d0:	e001      	b.n	80008d6 <LoopFillZerobss>

080008d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d4:	3204      	adds	r2, #4

080008d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d8:	d3fb      	bcc.n	80008d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008da:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80008de:	f000 f811 	bl	8000904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008e2:	f7ff ffcb 	bl	800087c <main>

080008e6 <LoopForever>:

LoopForever:
    b LoopForever
 80008e6:	e7fe      	b.n	80008e6 <LoopForever>
  ldr   r0, =_estack
 80008e8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80008f4:	0800096c 	.word	0x0800096c
  ldr r2, =_sbss
 80008f8:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80008fc:	20000054 	.word	0x20000054

08000900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC1_2_IRQHandler>
	...

08000904 <__libc_init_array>:
 8000904:	b570      	push	{r4, r5, r6, lr}
 8000906:	2500      	movs	r5, #0
 8000908:	4e0c      	ldr	r6, [pc, #48]	; (800093c <__libc_init_array+0x38>)
 800090a:	4c0d      	ldr	r4, [pc, #52]	; (8000940 <__libc_init_array+0x3c>)
 800090c:	1ba4      	subs	r4, r4, r6
 800090e:	10a4      	asrs	r4, r4, #2
 8000910:	42a5      	cmp	r5, r4
 8000912:	d109      	bne.n	8000928 <__libc_init_array+0x24>
 8000914:	f000 f81a 	bl	800094c <_init>
 8000918:	2500      	movs	r5, #0
 800091a:	4e0a      	ldr	r6, [pc, #40]	; (8000944 <__libc_init_array+0x40>)
 800091c:	4c0a      	ldr	r4, [pc, #40]	; (8000948 <__libc_init_array+0x44>)
 800091e:	1ba4      	subs	r4, r4, r6
 8000920:	10a4      	asrs	r4, r4, #2
 8000922:	42a5      	cmp	r5, r4
 8000924:	d105      	bne.n	8000932 <__libc_init_array+0x2e>
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800092c:	4798      	blx	r3
 800092e:	3501      	adds	r5, #1
 8000930:	e7ee      	b.n	8000910 <__libc_init_array+0xc>
 8000932:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000936:	4798      	blx	r3
 8000938:	3501      	adds	r5, #1
 800093a:	e7f2      	b.n	8000922 <__libc_init_array+0x1e>
 800093c:	08000964 	.word	0x08000964
 8000940:	08000964 	.word	0x08000964
 8000944:	08000964 	.word	0x08000964
 8000948:	08000968 	.word	0x08000968

0800094c <_init>:
 800094c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800094e:	bf00      	nop
 8000950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000952:	bc08      	pop	{r3}
 8000954:	469e      	mov	lr, r3
 8000956:	4770      	bx	lr

08000958 <_fini>:
 8000958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800095a:	bf00      	nop
 800095c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800095e:	bc08      	pop	{r3}
 8000960:	469e      	mov	lr, r3
 8000962:	4770      	bx	lr
